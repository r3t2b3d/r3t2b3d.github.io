<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 0ut51d3:)</title>
    <link>https://r3t2b3d.github.io/posts/</link>
    <description>Recent content in Posts on 0ut51d3:)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Oct 2023 00:44:01 +0800</lastBuildDate><atom:link href="https://r3t2b3d.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CorCTF2022   corrupted curves&#43;</title>
      <link>https://r3t2b3d.github.io/posts/corctf2022-corrupted-curves&#43;/</link>
      <pubDate>Thu, 26 Oct 2023 00:44:01 +0800</pubDate>
      
      <guid>https://r3t2b3d.github.io/posts/corctf2022-corrupted-curves&#43;/</guid>
      <description>corrupted curves&#43; task.py
#!/opt/homebrew/bin/python3 from secrets import randbits from Crypto.Util.number import getPrime from random import randrange def square_root(a, p): if legendre_symbol(a, p) != 1: return 0 elif a == 0: return 0 elif p == 2: return 0 elif p % 4 == 3: return pow(a, (p &#43; 1) // 4, p) s = p - 1 e = 0 while s % 2 == 0: s //= 2 e &#43;= 1 n = 2 while legendre_symbol(n, p) !</description>
      <content:encoded><![CDATA[<h2 id="corrupted-curves">corrupted curves+</h2>
<p><code>task.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/opt/homebrew/bin/python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> secrets <span style="color:#f92672">import</span> randbits
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> randrange
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">square_root</span>(a, p):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> legendre_symbol(a, p) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> a <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> p <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> p <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> pow(a, (p <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">4</span>, p)
</span></span><span style="display:flex;"><span>    s <span style="color:#f92672">=</span> p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> s <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">//=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        e <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> legendre_symbol(n, p) <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> pow(a, (s <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>, p)
</span></span><span style="display:flex;"><span>    b <span style="color:#f92672">=</span> pow(a, s, p)
</span></span><span style="display:flex;"><span>    g <span style="color:#f92672">=</span> pow(n, s, p)
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> e
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        t <span style="color:#f92672">=</span> b
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> range(r):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> t <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>            t <span style="color:#f92672">=</span> pow(t, <span style="color:#ae81ff">2</span>, p)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> m <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> x
</span></span><span style="display:flex;"><span>        gs <span style="color:#f92672">=</span> pow(g, <span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> (r <span style="color:#f92672">-</span> m <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>), p)
</span></span><span style="display:flex;"><span>        g <span style="color:#f92672">=</span> (gs <span style="color:#f92672">*</span> gs) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> (x <span style="color:#f92672">*</span> gs) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        b <span style="color:#f92672">=</span> (b <span style="color:#f92672">*</span> g) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> m
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">legendre_symbol</span>(a, p):
</span></span><span style="display:flex;"><span>    ls <span style="color:#f92672">=</span> pow(a, (p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>, p)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">if</span> ls <span style="color:#f92672">==</span> p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">else</span> ls
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">EllipticCurve</span>:
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, p, a, b):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>a <span style="color:#f92672">=</span> a
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>b <span style="color:#f92672">=</span> b
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>p <span style="color:#f92672">=</span> p
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>check_curve():
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#34;Not an elliptic curve!&#34;</span>)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_curve</span>(self):
</span></span><span style="display:flex;"><span>        discrim <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>pow(self<span style="color:#f92672">.</span>a, <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">27</span><span style="color:#f92672">*</span>pow(self<span style="color:#f92672">.</span>b, <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> discrim <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>p:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">lift_x</span>(self, px):
</span></span><span style="display:flex;"><span>        y2 <span style="color:#f92672">=</span> (pow(px, <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>a<span style="color:#f92672">*</span>px <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>b) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>p
</span></span><span style="display:flex;"><span>        py <span style="color:#f92672">=</span> square_root(y2, self<span style="color:#f92672">.</span>p)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> py <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#34;No point on elliptic curve.&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> py
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;this_is_a_sample_flag&#39;</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> int<span style="color:#f92672">.</span>from_bytes(flag, <span style="color:#e6db74">&#39;big&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Generating parameters...&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>    a, b <span style="color:#f92672">=</span> randbits(<span style="color:#ae81ff">384</span>), randbits(<span style="color:#ae81ff">384</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        E <span style="color:#f92672">=</span> EllipticCurve(p, a, b)
</span></span><span style="display:flex;"><span>        fy <span style="color:#f92672">=</span> E<span style="color:#f92672">.</span>lift_x(flag)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;p = </span><span style="color:#e6db74">{</span>p<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;flag y = </span><span style="color:#e6db74">{</span>fy<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>checked <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> count <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2022</span>:
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> randrange(<span style="color:#ae81ff">2</span>, p)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> int(x) <span style="color:#f92672">in</span> checked <span style="color:#f92672">or</span> x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">384</span> <span style="color:#f92672">or</span> abs(x <span style="color:#f92672">-</span> p) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">384</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;&gt;:(&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        e <span style="color:#f92672">=</span> randbits(<span style="color:#ae81ff">48</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;e = </span><span style="color:#e6db74">{</span>e<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        E <span style="color:#f92672">=</span> EllipticCurve(p, a<span style="color:#f92672">^</span>e, b<span style="color:#f92672">^</span>e)
</span></span><span style="display:flex;"><span>        py <span style="color:#f92672">=</span> E<span style="color:#f92672">.</span>lift_x(x)
</span></span><span style="display:flex;"><span>        checked<span style="color:#f92672">.</span>add(x)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;x = </span><span style="color:#e6db74">{</span>x<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;y = </span><span style="color:#e6db74">{</span>py<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        count <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;:(&#34;</span>)
</span></span><span style="display:flex;"><span>    more <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;more&gt; &#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> more<span style="color:#f92672">.</span>strip() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;no&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;bye!&#34;</span>)
</span></span></code></pre></div><h2 id="solution">Solution</h2>
<p>I find the challenge <code>e2D1p</code> which I made in n1ctf has the same idea with this.</p>
<p>First, we can get $y_0,p$ which satisfy the equation $y_0^2=m^3+a*m+b\ (mod\ p)$</p>
<p>Then we should recover $a,b$  with 2022 inquire oppotunities.</p>
<p>In every inquiry, we have $y^2=x^3+(a\oplus e)*x+(b\oplus e)\ (mod\ q)$ with $x,y,e$ known.</p>
<p>Rewriting the equation as follow,
$$
y^2=x^3+a_l*x+\sum\limits_{i=0}\limits^{47}2^i\cdot(a_i\oplus e_i)*x+b_l+\sum\limits_{i=0}\limits^{47}2^i\cdot(b_i\oplus e_i)\ (mod\ p)
$$
By the way,  for one bit message $a,b$
$$
a\oplus b =
\begin{cases}
a&amp; \text{b=0}\\
1-a&amp; \text{b=1}
\end{cases}
$$
The equation can be converted the linear expression about $a_l,\ b_l,\ a_i,\ b_i$</p>
<p>We can solve these variables by collect 98 equations.</p>
<p>So, if we get $a.b$, just need to find the root of $x^3+a*x+b-y_0^2\ (mod\ p)$. That&rsquo;s easy!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./corruptedcurvesplus.py&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;p = &#34;</span>)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>))
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;flag y = &#34;</span>)
</span></span><span style="display:flex;"><span>flag_y <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bound <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>maxb <span style="color:#f92672">=</span> <span style="color:#ae81ff">98</span>
</span></span><span style="display:flex;"><span>para <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> bound <span style="color:#f92672">&lt;</span> maxb:
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;e = &#34;</span>)
</span></span><span style="display:flex;"><span>    e <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>))
</span></span><span style="display:flex;"><span>    sign <span style="color:#f92672">=</span> io<span style="color:#f92672">.</span>recvline()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;:(&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> sign:
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> int(sign[<span style="color:#ae81ff">4</span>:])
</span></span><span style="display:flex;"><span>        io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;y = &#34;</span>)
</span></span><span style="display:flex;"><span>        y <span style="color:#f92672">=</span> int(io<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>))
</span></span><span style="display:flex;"><span>        bound <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        para<span style="color:#f92672">.</span>append((e, x, y))
</span></span><span style="display:flex;"><span>    io<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">&#34;more&gt; &#34;</span>, <span style="color:#e6db74">&#39;y&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mat <span style="color:#f92672">=</span> matrix(Zmod(p), maxb, <span style="color:#ae81ff">98</span>)
</span></span><span style="display:flex;"><span>u <span style="color:#f92672">=</span> vector(Zmod(p), maxb)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(maxb):
</span></span><span style="display:flex;"><span>    e, x, y <span style="color:#f92672">=</span> para[i]
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> y<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-</span>x<span style="color:#f92672">**</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>    mat[i, <span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> x; mat[i, <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">48</span>):
</span></span><span style="display:flex;"><span>        ej <span style="color:#f92672">=</span> (e<span style="color:#f92672">&gt;&gt;</span>j)<span style="color:#f92672">&amp;</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ej:
</span></span><span style="display:flex;"><span>            r <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>j<span style="color:#f92672">*</span>(x<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            mat[i, j<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>j<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span>            mat[i, j<span style="color:#f92672">+</span><span style="color:#ae81ff">50</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>j<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            mat[i, j<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> x<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>j<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span>            mat[i, j<span style="color:#f92672">+</span><span style="color:#ae81ff">50</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>j<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span>    u[i] <span style="color:#f92672">=</span> r<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>io<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> mat<span style="color:#f92672">.</span>det() <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>sol <span style="color:#f92672">=</span> mat<span style="color:#f92672">.</span>solve_right(u)
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> sum([sol[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">+</span>[sol[i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">48</span>)])
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> sum([sol[<span style="color:#ae81ff">1</span>]]<span style="color:#f92672">+</span>[sol[i<span style="color:#f92672">+</span><span style="color:#ae81ff">50</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">48</span>)])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PR<span style="color:#f92672">.&lt;</span>x<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> PolynomialRing(GF(p))
</span></span><span style="display:flex;"><span>F <span style="color:#f92672">=</span> x<span style="color:#f92672">^</span><span style="color:#ae81ff">3</span><span style="color:#f92672">+</span>a<span style="color:#f92672">*</span>x<span style="color:#f92672">+</span>b<span style="color:#f92672">-</span>flag_y<span style="color:#f92672">^</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>root <span style="color:#f92672">=</span> F<span style="color:#f92672">.</span>roots()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> root:
</span></span><span style="display:flex;"><span>    print(bytes<span style="color:#f92672">.</span>fromhex(hex(item[<span style="color:#ae81ff">0</span>])[<span style="color:#ae81ff">2</span>:]))
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>